def mol_count(inp_dict):
    """ The mol_count function uses the output generated by the var_extract function, more specifically support for
    each variant-type as well as the support for the reference and variant call for str1 and str2. Returns a list
    consisting of the support for each variant type

    Args:
        :param inp_dict: The output dict from the var_extract function
        Example dict for a FFPE-artefact:
        inp_dict = umi_key: {"Single_Hits": Str1_Hits: {}, Str2_Hits:{C,T}, "Mate_Hits": Mutation_Hits": {},
        "FFPE_Hits": {"String_1": C, "String_2": T}, "N_Hits": {}, "Del_Hits": {}, "Reference_Support": 0,
        "Mutation_Support": 0, "FFPE_Support": 1, "N_Support": 0, "Del_Support": 0}}

    Returns:
        :return: Returns a list consisting of the support for each variant type
        Example list for a FFPE-artefact:
        [0,0,1,0,0]
    """
    ref_sup = 0
    mut_sup = 0
    ffpe_sup = 0
    n_sup = 0
    del_sup = 0
    # Counts the total support for each variant-option for every UMI-key entry in input_dict
    for umi_key in inp_dict:
        if inp_dict[umi_key]["Mate_Hits"]:
            ref_sup += inp_dict[umi_key]["Mate_Hits"]["Reference_Support"]
            mut_sup += inp_dict[umi_key]["Mate_Hits"]["Mutation_Support"]
            ffpe_sup += inp_dict[umi_key]["Mate_Hits"]["FFPE_Support"]
            n_sup += inp_dict[umi_key]["Mate_Hits"]["N_Support"]
            del_sup += inp_dict[umi_key]["Mate_Hits"]["Del_Support"]
        else:
            continue
    return [ref_sup, mut_sup, ffpe_sup, n_sup, del_sup]


def nuc_count(inp_dict, nuc):
    """ The nuc_count function uses the output generated by the var_extract function, more specifically the support for
    a given nucleotide of interest. Returns a dict containing subsequent dicts with the support for the nucleotide
    for paired reads on string 1, string 2, as well as the support for the nuceleotide on single reads belonging to
     string 1 and string 2.

    Args:
        :param inp_dict: The output dict from the var_extract function
        Example dict for a FFPE-artefact:
        inp_dict = umi_key: {"Single_Hits": Str1_Hits: {}, Str2_Hits:{C,T}, "Mate_Hits": Mutation_Hits": {},
        "FFPE_Hits": {"String_1": C, "String_2": T}, "N_Hits": {}, "Del_Hits": {}, "Reference_Support": 0,
        "Mutation_Support": 0, "FFPE_Support": 1, "N_Support": 0, "Del_Support": 0}}
        :param nuc: The nucleotide of interest

    Returns:
        :return:  Returns a dict with separate dicts giving the support for the nucleotide for str1, str2 and each
        variant type
        Example dict for the nucleotide C for a imaginary input_dict:
        n_sup = {"Paired": {"String_1": {C: {12}}, "String_2": C: {11}, "String_1_Single": C: {5},
        "String_2_Single": C: {2}}
    """
    n_sup = {"Paired": {}, "String_1_Single": {}, "String_2_Single": {}}
    for n in nuc:
        n_sup["Paired"] = {"String_1": {}, "String_2": {}}
        n_sup["Paired"]["String_1"][n] = 0
        n_sup["Paired"]["String_2"][n] = 0
        n_sup["String_1_Single"][n] = 0
        n_sup["String_2_Single"][n] = 0
        for umi_key in inp_dict:
            # Iterates through each alternative allele called by the variant caller
            # Counts the no. molecules supporting the variant for each direction in the single hits
            if inp_dict[umi_key]:
                if inp_dict[umi_key]["Single_Hits"]:
                    for sh_dir in inp_dict[umi_key]["Single_Hits"]:
                        if inp_dict[umi_key]["Single_Hits"][sh_dir]:
                            if n in inp_dict[umi_key]["Single_Hits"][sh_dir]:
                                n_sup[sh_dir][n] += 1
            # Sees if the dict "Mate Hits" is empty, if not, counts the no molecules supporting the variant for each
            # dict within the "Mate Hits" dictionary
            if inp_dict[umi_key]["Mate_Hits"]:
                new_lst = list(inp_dict[umi_key]["Mate_Hits"].items())
                new_dict = dict(new_lst[0:-7])
                for v_h in new_dict:
                    if new_dict[v_h]:
                        for s_t in new_dict[v_h]:
                            if new_dict[v_h][s_t]:
                                if n in new_dict[v_h][s_t]:
                                    n_sup["Paired"][s_t][n] += 1
    return n_sup
